Adjusted by Artur Sinila <freesoftware@logarithmus.dev>

From e96dbf4b48e689ab810b0428d0858a6abc2c83bd Mon Sep 17 00:00:00 2001
From: Ivan Kochin <iv.kochin@gmail.com>
Date: Thu, 1 Jul 2021 15:07:39 +0300
Subject: [PATCH] Upgrade from HWLOC 2.4 to HWLOC 2.5 (#448)

* Upgrade from HWLOC 2.4 to HWLOC 2.5
* Introduce tbbbind_2_5 library
* Remove tbbbind_2_4 library
* Use the HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING topology flag (introduces as a part of HWLOC 2.5) to restrict topology discovering to process binding
* Fix testing on Linux
* Apply review comments
* Improve wording: variable -> substring
* Use right tbbbind version for incompatible hwlocs test
* Rework option semantic
* Update README.md for CMake
* Rework readme
* Update cmake/README.md

Signed-off-by: Kochin, Ivan <kochin.ivan@intel.com>

Co-authored-by: Aleksei Fedotov <aleksei.fedotov@intel.com>
---
 CMakeLists.txt                         |  3 ++-
 cmake/README.md                        | 11 +++++---
 cmake/hwloc_detection.cmake            |  9 ++++---
 src/tbb/governor.cpp                   |  4 +--
 src/tbbbind/CMakeLists.txt             |  2 +-
 src/tbbbind/tbb_bind.cpp               | 23 +++++++++++-----
 test/CMakeLists.txt                    | 30 ++++++++++-----------
 test/common/common_arena_constraints.h | 37 ++++++++++++++++++++++----
 8 files changed, 82 insertions(+), 37 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34a23d400..301899aca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -100,6 +100,7 @@ option(TBB_NO_APPCONTAINER "Apply /APPCONTAINER:NO (for testing binaries for Win
 option(TBB4PY_BUILD "Enable tbb4py build" OFF)
 option(TBB_CPF "Enable preview features of the library" OFF)
 option(TBB_FIND_PACKAGE "Enable search for external oneTBB using find_package instead of build from sources" OFF)
+option(TBB_DISABLE_HWLOC_AUTOMATIC_SEARCH "Disable HWLOC automatic search by pkg-config tool" OFF)
 
 if (NOT DEFINED BUILD_SHARED_LIBS)
     set(BUILD_SHARED_LIBS ON)
@@ -195,7 +196,7 @@ else()
         add_subdirectory(src/tbbmalloc)
         add_subdirectory(src/tbbmalloc_proxy)
         if (APPLE)
-            message(STATUS "TBBBind build target is disabled due to unsupported environment")
+            message(STATUS "TBBBind build targets are disabled due to unsupported environment")
         else()
             add_subdirectory(src/tbbbind)
         endif()
diff --git a/cmake/README.md b/cmake/README.md
index 36fc303f9..b58c2ff6a 100644
--- a/cmake/README.md
+++ b/cmake/README.md
@@ -13,6 +13,7 @@ TBB4PY_BUILD:BOOL - Enable  Intel(R) oneAPI Threading Building Blocks (oneTBB) P
 TBB_CPF:BOOL - Enable preview features of the library (OFF by default)
 TBB_INSTALL_VARS:BOOL - Enable auto-generated vars installation(packages generated by `cpack` and `make install` will also include the vars script)(OFF by default)
 TBB_VALGRIND_MEMCHECK:BOOL - Enable scan for memory leaks using Valgrind (OFF by default)
+TBB_DISABLE_HWLOC_AUTOMATIC_SEARCH - Disable HWLOC automatic search by pkg-config tool (OFF by default)
 ```
 
 ## Configure, build and test
@@ -42,9 +43,9 @@ Some useful options:
 
 #### TBBBind library configuration
 
-The TBBbind library has two versions: `tbbbind` and `tbbbind_2_0`. Each of these versions is linked with corresponding HWLOC library version: `tbbbind` links with HWLOC 1.11.x , `tbbbind_2_0` links with HWLOC 2.x.
+The TBBbind library has three versions: `tbbbind`, `tbbbind_2_0` and `tbbbind_2_5`. Each of these versions is linked with corresponding HWLOC library version: `tbbbind` links with HWLOC 1.11.x , `tbbbind_2_0` links with HWLOC 2.1-2.4, `tbbbind_2_5` links with HWLOC 2.5 and later.
 
-To enable the TBBBind library build or special tests that performed inside the HWLOC environment, please specify the following CMake variables:
+The search for a suitable version of the HWLOC library is enabled by default, but if you want to use a specific version of the library, you can specify the path to it manually using the following CMake variables:
 
  - `CMAKE_HWLOC_<HWLOC_VER>_LIBRARY_PATH` - path to the corresponding HWLOC version shared library on Linux or path to `.lib` file on Windows.
  - `CMAKE_HWLOC_<HWLOC_VER>_INCLUDE_PATH` - path to the corresponding HWLOC version includes directory.
@@ -52,7 +53,11 @@ To enable the TBBBind library build or special tests that performed inside the H
 Windows requires one additional variable for correct TBBBind library building:
  - `CMAKE_HWLOC_<HWLOC_VER>_DLL_PATH` - path to the corresponding HWLOC version `.dll` file.
 
-`HWLOC_VER` variable used above can be replaced with one of the two values: `1_11` for the `tbbbind` library configuration and `2` for the `tbbbind_2_0` library configuration.
+`HWLOC_VER` substring used above can be replaced with one of the three values: `1_11` for the `tbbbind` library configuration, `2` for the `tbbbind_2_0`, and `2_5` for the `tbbbind_2_5` library configuration.
+
+If you specify variables for several TBBBind versions, then building process for all of these versions will be performed during single build session.
+
+Specify the `TBB_DISABLE_HWLOC_AUTOMATIC_SEARCH` to disable HWLOC libraries automatic search.
 
 ### Build
 
diff --git a/cmake/hwloc_detection.cmake b/cmake/hwloc_detection.cmake
index e1eeca5fa..de7f3c047 100644
--- a/cmake/hwloc_detection.cmake
+++ b/cmake/hwloc_detection.cmake
@@ -12,7 +12,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-list(APPEND HWLOC_REQUIRED_VERSIONS 1_11 2 2_4)
+list(APPEND HWLOC_REQUIRED_VERSIONS 1_11 2 2_5)
 
 foreach(hwloc_version ${HWLOC_REQUIRED_VERSIONS})
     if (NOT WIN32)
@@ -55,10 +56,10 @@ if (NOT HWLOC_TARGET_EXPLICITLY_DEFINED AND
         if (HWLOC_FOUND)
             if (HWLOC_VERSION VERSION_LESS 2)
                 set(TBBBIND_LIBRARY_NAME tbbbind)
-            elseif(HWLOC_VERSION VERSION_LESS 2.4)
+            elseif(HWLOC_VERSION VERSION_LESS 2.5)
                 set(TBBBIND_LIBRARY_NAME tbbbind_2_0)
             else()
-                set(TBBBIND_LIBRARY_NAME tbbbind_2_4)
+                set(TBBBIND_LIBRARY_NAME tbbbind_2_5)
             endif()
         endif()
     endif()
diff --git a/src/tbb/governor.cpp b/src/tbb/governor.cpp
index bf4e402d1..b842e075f 100644
--- a/src/tbb/governor.cpp
+++ b/src/tbb/governor.cpp
@@ -362,7 +362,7 @@ static const unsigned LinkTableSize = sizeof(TbbBindLinkTable) / sizeof(dynamic_
 
 #define TBBBIND_NAME LIBRARY_PREFIX "tbbbind" DEBUG_SUFFIX LIBRARY_EXTENSION
 #define TBBBIND_2_0_NAME LIBRARY_PREFIX "tbbbind_2_0" DEBUG_SUFFIX LIBRARY_EXTENSION
-#define TBBBIND_2_4_NAME LIBRARY_PREFIX "tbbbind_2_4" DEBUG_SUFFIX LIBRARY_EXTENSION
+#define TBBBIND_2_5_NAME LIBRARY_PREFIX "tbbbind_2_5" DEBUG_SUFFIX LIBRARY_EXTENSION
 #endif /* _WIN32 || _WIN64 || __linux__ */
 
 // Representation of system hardware topology information on the TBB side.
@@ -389,7 +389,7 @@ const char* load_tbbbind_shared_object() {
     GetNativeSystemInfo(&si);
     if (si.dwNumberOfProcessors > 32) return nullptr;
 #endif /* _WIN32 && !_WIN64 */
-    for (const auto& tbbbind_version : {TBBBIND_2_4_NAME, TBBBIND_2_0_NAME, TBBBIND_NAME}) {
+    for (const auto& tbbbind_version : {TBBBIND_2_5_NAME, TBBBIND_2_0_NAME, TBBBIND_NAME}) {
         if (dynamic_link(tbbbind_version, TbbBindLinkTable, LinkTableSize)) {
             return tbbbind_version;
         }
diff --git a/src/tbbbind/CMakeLists.txt b/src/tbbbind/CMakeLists.txt
index 029893751..e5cdbf8bb 100644
--- a/src/tbbbind/CMakeLists.txt
+++ b/src/tbbbind/CMakeLists.txt
@@ -99,7 +99,7 @@ if (NOT DEFINED HWLOC_TARGET_EXPLICITLY_DEFINED AND DEFINED HWLOC_LIBRARIES)
 else()
     tbbbind_build(tbbbind     HWLOC::hwloc_1_11)
     tbbbind_build(tbbbind_2_0 HWLOC::hwloc_2   )
-    tbbbind_build(tbbbind_2_4 HWLOC::hwloc_2_4 )
+    tbbbind_build(tbbbind_2_5 HWLOC::hwloc_2_5 )
 endif()
 
 
diff --git a/src/tbbbind/tbb_bind.cpp b/src/tbbbind/tbb_bind.cpp
index 97be308c7..88c956acb 100644
--- a/src/tbbbind/tbb_bind.cpp
+++ b/src/tbbbind/tbb_bind.cpp
@@ -34,7 +34,8 @@
 #pragma GCC diagnostic pop
 #endif
 
-#define __HWLOC_HYBRID_CPUS_INTERFACES_PRESENT (HWLOC_API_VERSION >= 0x20400)
+#define __TBBBIND_HWLOC_HYBRID_CPUS_INTERFACES_PRESENT (HWLOC_API_VERSION >= 0x20400)
+#define __TBBBIND_HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING_PRESENT (HWLOC_API_VERSION >= 0x20500)
 
 // Most of hwloc calls returns negative exit code on error.
 // This macro tracks error codes that are returned from the hwloc interfaces.
@@ -85,6 +86,16 @@ class platform_topology {
         // Parse topology
         if ( hwloc_topology_init( &topology ) == 0 ) {
             initialization_state = topology_allocated;
+#if __TBBBIND_HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING_PRESENT
+            if ( groups_num == 1 &&
+                 hwloc_topology_set_flags(topology,
+                     HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM |
+                     HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING
+                 ) != 0
+            ) {
+                return;
+            }
+#endif
             if ( hwloc_topology_load( topology ) == 0 ) {
                 initialization_state = topology_loaded;
             }
@@ -135,7 +146,7 @@ class platform_topology {
             numa_indexes_list.resize(numa_nodes_count);
             hwloc_obj_t node_buffer;
             hwloc_bitmap_foreach_begin(i, process_node_affinity_mask) {
-                node_buffer = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, i);
+                node_buffer = hwloc_get_numanode_obj_by_os_index(topology, i);
                 numa_indexes_list[counter] = static_cast<int>(node_buffer->logical_index);
 
                 if ( numa_indexes_list[counter] > max_numa_index ) {
@@ -150,7 +161,7 @@ class platform_topology {
             numa_affinity_masks_list.resize(max_numa_index + 1);
             int index = 0;
             hwloc_bitmap_foreach_begin(i, process_node_affinity_mask) {
-                node_buffer = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, i);
+                node_buffer = hwloc_get_numanode_obj_by_os_index(topology, i);
                 index = static_cast<int>(node_buffer->logical_index);
 
                 hwloc_cpuset_t& current_mask = numa_affinity_masks_list[index];
@@ -168,7 +179,7 @@ class platform_topology {
             core_types_indexes_list.push_back(-1);
             return;
         }
-#if __HWLOC_HYBRID_CPUS_INTERFACES_PRESENT
+#if __TBBBIND_HWLOC_HYBRID_CPUS_INTERFACES_PRESENT
         __TBB_ASSERT(hwloc_get_api_version() >= 0x20400, "Hybrid CPUs support interfaces required HWLOC >= 2.4");
         // Parsing the hybrid CPU topology
         int core_types_number = hwloc_cpukinds_get_nr(topology, 0);
@@ -196,9 +207,9 @@ class platform_topology {
                 }
             }
         }
-#else /*!__HWLOC_HYBRID_CPUS_INTERFACES_PRESENT*/
+#else /*!__TBBBIND_HWLOC_HYBRID_CPUS_INTERFACES_PRESENT*/
         bool core_types_parsing_broken{true};
-#endif /*__HWLOC_HYBRID_CPUS_INTERFACES_PRESENT*/
+#endif /*__TBBBIND_HWLOC_HYBRID_CPUS_INTERFACES_PRESENT*/
 
         if (core_types_parsing_broken) {
             for (auto& core_type_mask : core_types_affinity_masks_list) {
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index bdae9e2b1..c2b9d6dba 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -275,9 +275,9 @@ function(tbb_add_tbbbind_test)
         FAIL_REGULAR_EXPRESSION "Status:.*FAILURE"
     )
 
-    if (TARGET HWLOC::hwloc_2_4 AND NOT HWLOC_2_4_TESTS_STATUS_SHOWN)
-        message(STATUS "HWLOC 2.4 dependent tests were enabled.")
-        set(HWLOC_2_4_TESTS_STATUS_SHOWN TRUE PARENT_SCOPE)
+    if (TARGET HWLOC::hwloc_2_5 AND NOT HWLOC_2_5_TESTS_STATUS_SHOWN)
+        message(STATUS "HWLOC 2.5 dependent tests were enabled.")
+        set(HWLOC_2_5_TESTS_STATUS_SHOWN TRUE PARENT_SCOPE)
     endif()
 
     if (TARGET HWLOC::hwloc_2 AND NOT HWLOC_2_TESTS_STATUS_SHOWN)
@@ -291,22 +291,22 @@ function(tbb_add_tbbbind_test)
     endif()
 
     list(APPEND HWLOC_TEST_CASES
-        hwloc_2_4
+        hwloc_2_5
         hwloc_2
         hwloc_1_11
-        hwloc_2_4_hwloc_2
-        hwloc_2_4_hwloc_1_11
+        hwloc_2_5_hwloc_2
+        hwloc_2_5_hwloc_1_11
         hwloc_2_hwloc_1_11
-        hwloc_2_4_hwloc_2_hwloc_1_11
+        hwloc_2_5_hwloc_2_hwloc_1_11
     )
 
-    list(APPEND HWLOC_TEST_CASE_0_VARS tbbbind_2_4 "hwloc_2_4")
+    list(APPEND HWLOC_TEST_CASE_0_VARS tbbbind_2_5 "hwloc_2_5")
     list(APPEND HWLOC_TEST_CASE_1_VARS tbbbind_2   "hwloc_2")
     list(APPEND HWLOC_TEST_CASE_2_VARS tbbbind     "hwloc_1_11")
-    list(APPEND HWLOC_TEST_CASE_3_VARS tbbbind_2_4 "hwloc_2_4,hwloc_2")
-    list(APPEND HWLOC_TEST_CASE_4_VARS tbbbind_2_4 "hwloc_2_4,hwloc_1_11")
+    list(APPEND HWLOC_TEST_CASE_3_VARS tbbbind_2_5 "hwloc_2_5,hwloc_2")
+    list(APPEND HWLOC_TEST_CASE_4_VARS tbbbind_2_5 "hwloc_2_5,hwloc_1_11")
     list(APPEND HWLOC_TEST_CASE_5_VARS tbbbind_2   "hwloc_2,hwloc_1_11")
-    list(APPEND HWLOC_TEST_CASE_6_VARS tbbbind_2_4 "hwloc_2_4,hwloc_2,hwloc_1_11")
+    list(APPEND HWLOC_TEST_CASE_6_VARS tbbbind_2_5 "hwloc_2_5,hwloc_2,hwloc_1_11")
 
     foreach(TEST_CASE ${HWLOC_TEST_CASES})
         list(FIND HWLOC_TEST_CASES ${TEST_CASE} TEST_CASE_INDEX)
@@ -331,7 +331,7 @@ endfunction()
 # Copy libraries to test folder to make it visible during tests execution if external TBB is tested.
 # TODO: check and update for multi-config generators.
 if (TBB_FOUND)
-    list(APPEND _tbb_test_components tbb tbbmalloc tbbmalloc_proxy tbbbind tbbbind_2_0 tbbbind_2_4)
+    list(APPEND _tbb_test_components tbb tbbmalloc tbbmalloc_proxy tbbbind tbbbind_2_0 tbbbind_2_5)
     foreach(_component ${_tbb_test_components})
         if (TARGET TBB::${_component})
             get_property(${_component}_lib_file_location TARGET TBB::${_component} PROPERTY LOCATION)
@@ -593,6 +593,6 @@ if (NOT "${CMAKE_SYSTEM_PROCESSOR}" MATCHES "mips")
     tbb_add_test(SUBDIR tbbmalloc NAME test_malloc_new_handler DEPENDENCIES TBB::tbbmalloc_proxy)
 endif()
 
-unset(HWLOC_2_4_TESTS_STATUS_SHOWN)
+unset(HWLOC_2_5_TESTS_STATUS_SHOWN)
 unset(HWLOC_2_TESTS_STATUS_SHOWN)
 unset(HWLOC_1_11_TESTS_STATUS_SHOWN)
diff --git a/test/common/common_arena_constraints.h b/test/common/common_arena_constraints.h
index 2a0b1ea97..5efc71082 100644
--- a/test/common/common_arena_constraints.h
+++ b/test/common/common_arena_constraints.h
@@ -38,9 +38,26 @@
 
 #if (_WIN32 || _WIN64) && __TBB_HWLOC_VALID_ENVIRONMENT
 #include <windows.h>
-int get_processors_groups_count() { return GetActiveProcessorGroupCount(); }
+int get_processors_group_count() {
+    SYSTEM_INFO si;
+    GetNativeSystemInfo(&si);
+    DWORD_PTR pam, sam, m = 1;
+    GetProcessAffinityMask( GetCurrentProcess(), &pam, &sam );
+    int nproc = 0;
+    for ( std::size_t i = 0; i < sizeof(DWORD_PTR) * CHAR_BIT; ++i, m <<= 1 ) {
+        if ( pam & m )
+            ++nproc;
+    }
+    // Setting up processor groups in case the process does not restrict affinity mask and more than one processor group is present
+    if ( nproc == (int)si.dwNumberOfProcessors  ) {
+        // The process does not have restricting affinity mask and multiple processor groups are possible
+        return (int)GetActiveProcessorGroupCount();
+    } else {
+        return 1;
+    }
+}
 #else
-int get_processors_groups_count() { return 1; }
+int get_processors_group_count() { return 1; }
 #endif
 
 //TODO: Write a test that checks for memory leaks during dynamic link/unlink of TBBbind.
@@ -69,6 +86,7 @@ int get_processors_groups_count() { return 1; }
 #endif
 
 #define __HWLOC_HYBRID_CPUS_INTERFACES_PRESENT (HWLOC_API_VERSION >= 0x20400)
+#define __HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING_PRESENT (HWLOC_API_VERSION >= 0x20500)
 // At this moment the hybrid CPUs HWLOC interfaces returns unexpected results on some Windows machines
 // in the 32-bit arch mode.
 #define __HWLOC_HYBRID_CPUS_INTERFACES_VALID (!_WIN32 || _WIN64)
@@ -153,9 +171,18 @@ class system_info {
 
     system_info() {
         hwloc_require_ex(hwloc_topology_init, &topology);
+#if __HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING_PRESENT
+        if ( get_processors_group_count() == 1 ) {
+            REQUIRE(
+                hwloc_topology_set_flags(topology,
+                    HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM |
+                    HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING) == 0
+            );
+        }
+#endif
         hwloc_require_ex(hwloc_topology_load, topology);
 
-        if ( get_processors_groups_count() > 1 ) {
+        if ( get_processors_group_count() > 1 ) {
             process_cpuset = hwloc_bitmap_dup(hwloc_topology_get_complete_cpuset(topology));
         } else {
             process_cpuset = hwloc_bitmap_alloc();
@@ -434,7 +461,7 @@ system_info::affinity_mask get_arena_affinity(tbb::task_arena& ta) {
                 barrier.wait();
                 tbb::spin_mutex::scoped_lock lock(affinity_mutex);
                 system_info::affinity_mask thread_affinity = system_info::allocate_current_affinity_mask();
-                if (get_processors_groups_count() == 1) {
+                if (get_processors_group_count() == 1) {
                     REQUIRE_MESSAGE(hwloc_bitmap_isequal(thread_affinity, arena_affinity),
                         "Threads have different masks on machine without several processors groups.");
                 }
@@ -532,7 +559,7 @@ constraints_container generate_constraints_variety() {
         }
 
         // Some constraints may cause unexpected behavior, which would be fixed later.
-        if (get_processors_groups_count() > 1) {
+        if (get_processors_group_count() > 1) {
             for(auto it = results.begin(); it != results.end(); ++it) {
                 if (it->max_threads_per_core != tbb::task_arena::automatic
                    && (it->numa_id == tbb::task_arena::automatic || tbb::info::numa_nodes().size() == 1)
